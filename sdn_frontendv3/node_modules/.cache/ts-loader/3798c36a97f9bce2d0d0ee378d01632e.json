{"remainingRequest":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\babel-loader\\lib\\index.js!D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\ts-loader\\index.js??ref--15-2!D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue?vue&type=script&lang=ts","dependencies":[{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue","mtime":1653272884190},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\babel.config.js","mtime":1639411198188},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647613403080},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\babel-loader\\lib\\index.js","mtime":1647613402984},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\ts-loader\\index.js","mtime":1647613419057},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647613403080},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1647613423241}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { defineComponent, onMounted, reactive, watchEffect, ref, watch } from \"vue\";\r\nimport { Nodes, Edges, getFullConfigs } from \"v-network-graph\";\r\n// import * as vNG from \"v-network-graph\"\r\n// import {ForceLayout} from \"@/node_modules/v-network-graph/lib/layouts/force-layout\"\r\nimport client from \"@/apiclient\";\r\nimport \"/node_modules/vue-scrolling-table/dist/style.css\"\r\nimport Swal from 'sweetalert2'\r\n\r\nexport default defineComponent({\r\n  name: \"Home\",\r\n  setup() {\r\n    const portnum = ref<string>(\"\");\r\n    const filters = reactive({\r\n      port_num: ref<number[]>([]),\r\n      src_ip: ref<string[]>([]),\r\n      dst_ip: ref<string[]>([])\r\n    });\r\n    const nodes = reactive({});\r\n    const edges = reactive({});\r\n    const layouts = reactive({});\r\n    const flows = reactive({});\r\n    const selectedEdges = ref<string[]>([]);\r\n    const selectedEdge = ref<string>(\"\");\r\n    const selectedEdgeFlows = ref<any[]>([]);\r\n    const selectedNodes = ref<string[]>([]);\r\n    const selectedNode = ref<string>(\"\");\r\n    const policy_list = reactive({});\r\n\r\n    const configs = reactive(getFullConfigs())\r\n    configs.node.selectable = true;\r\n    configs.edge.selectable = edge => edge.selectable;\r\n    configs.edge.normal.width = edge => edge.animate ? 3 : 2;\r\n    configs.edge.normal.dasharray = edge => edge.animate ? \"5\" : \"0\"\r\n    configs.edge.normal.animate = edge => !!edge.animate\r\n    // configs.edge.marker.source.type = 'arrow'\r\n    configs.node.draggable = true;\r\n    configs.node.normal.color = node => node.color\r\n    const src_ip = ref<string>(\"\");\r\n    const dst_ip = ref<string>(\"\");\r\n    const threshold_input = ref<string>(\"1\");\r\n    const action_devices = ref<any[]>([{'device':\"\", \"action\":\"\", \"data\":\"\"}]);\r\n    const device_choices = reactive({});\r\n\r\n    const policy = reactive({\r\n      name:'',\r\n      device_management_ip:'',\r\n      src_ip:'',\r\n      src_netmask:'',\r\n      src_port:'',\r\n      dst_ip:'',\r\n      dst_netmask:'',\r\n      dst_port:'',\r\n      action:'',\r\n      outgoing:'',\r\n    });\r\n\r\n    async function fetchNetwork(nodes: Nodes, edges: Edges, layouts: any): Promise<void> {\r\n      const {\r\n        data: { graph, status },\r\n      } = await client.getAll();\r\n      const newNodes = graph.nodes;\r\n      const newEdges = graph.edges;\r\n      const newLayouts = graph.layout;\r\n      // const newChoices = \r\n      Object.assign(nodes, newNodes);\r\n      Object.assign(layouts, newLayouts);\r\n      Object.assign(edges, newEdges);\r\n      \r\n      if(status === \"ok\")\r\n        Swal.fire({title: \"Topology Loaded\", icon:\"success\", timer:2000})\r\n      // console.log('done')\r\n    }\r\n\r\n    async function fetchNetworkFlow(nodes: Nodes, edges: Edges, filters:any, layouts: any): Promise<void> {\r\n      const {\r\n        data: { graph, flows_data },\r\n      } = await client.postFilters(filters);\r\n      const newNodes = graph.nodes;\r\n      const newEdges = graph.edges;\r\n      // const newLayouts = graph.layout;\r\n\r\n      Object.assign(flows, flows_data)\r\n      Object.assign(nodes, newNodes);\r\n      Object.assign(edges, newEdges);\r\n      // Object.assign(layouts, newLayouts);\r\n\r\n      // console.log(nodes)\r\n      // console.log(edges)\r\n      // console.log(layouts)\r\n      // console.log('update flow done')\r\n    }\r\n\r\n    async function fetchPolicy(): Promise<void> {\r\n      const { data } = await client.getPolicyRouting();\r\n      Object.assign(policy_list, data.flows)\r\n    }\r\n\r\n    function getDevicesArray(): unknown[]{\r\n      const devices: unknown[] = [];\r\n      for (const node in nodes){\r\n        if(!nodes[node].name.includes(\"/\"))\r\n          devices.push(nodes[node])\r\n      }\r\n      // console.log(devices)\r\n      return devices;\r\n    }\r\n\r\n    function addPortFilter(): void {\r\n      if (portnum.value === \"\"){\r\n        return ;\r\n      }\r\n      const port = parseInt(portnum.value);\r\n      if (!filters.port_num.includes(port)) {\r\n        filters.port_num.push(port);\r\n      }\r\n      portnum.value = \"\";\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    function addSourceFilter(): void {\r\n      if (src_ip.value === \"\"){\r\n        return ;\r\n      }\r\n      const src = src_ip.value;\r\n      if (!filters.src_ip.includes(src)) {\r\n        filters.src_ip.push(src);\r\n      }\r\n      src_ip.value = \"\";\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    function addDestFilter(): void {\r\n      if (dst_ip.value === \"\"){\r\n        return ;\r\n      }\r\n      const dst = dst_ip.value;\r\n      if (!filters.dst_ip.includes(dst)) {\r\n        filters.dst_ip.push(dst);\r\n      }\r\n      dst_ip.value = \"\";\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    function getDeviceNamebyID(id: string): string{\r\n      for(const node in nodes){\r\n        if(nodes[node].device_id === id)\r\n          return nodes[node].name\r\n      }\r\n      return \"removed device\"\r\n    }\r\n\r\n    async function removePolicy(flow_id: string): Promise<void>{\r\n      const  data  = await client.deletePolicyRouting(flow_id)\r\n      console.log(data)\r\n      if(data){\r\n        Swal.fire({title:\"Remove Policy Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    }\r\n\r\n    async function addPolicy(): Promise<void>{\r\n\r\n      const actions: unknown[] = [];\r\n      // console.log(action_devices)\r\n      for(const action in action_devices.value){\r\n        actions.push({\r\n          'device_id': nodes[action_devices.value[action].device].device_id,\r\n          'action': parseInt(action_devices.value[action].action),\r\n          'data': action_devices.value[action].data\r\n        })\r\n      }\r\n      console.log(actions)\r\n\r\n      const {\r\n        data: {success}\r\n      } = await client.addPolicyRouting(\r\n        {\r\n          'name': policy.name,\r\n          'src_ip': policy.src_ip,\r\n          'src_port': policy.src_port,\r\n          'src_subnet': policy.src_netmask,\r\n          'dst_ip': policy.dst_ip,\r\n          'dst_port': policy.dst_port,\r\n          'dst_subnet': policy.dst_netmask,\r\n          'actions': actions\r\n        })\r\n      if(success){\r\n        Swal.fire({title:\"Add Policy Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    }\r\n\r\n    async function setLinkThreshold(){\r\n      const {\r\n        data: { success }\r\n      } = await client.setLinkUtilization({\r\n        'link_id':edges[selectedEdge.value]['link_id'],\r\n        'utilization_threshold': parseFloat(threshold_input.value)\r\n      });\r\n      if(success){\r\n        Swal.fire({title:\"Set Link Utilization Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    } \r\n\r\n\r\n    watch(\r\n      ()=>selectedEdges.value[0],\r\n      ()=>{\r\n        selectedEdge.value = selectedEdges?.value[0]\r\n        // fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n        selectedEdgeFlows.value = flows[selectedEdge.value]\r\n        threshold_input.value = edges[selectedEdge.value]?.utilization_threshold\r\n        \r\n        \r\n        // Object.assign(selectedEdgeFlows, flows[selectedEdge.value])\r\n        // edges[selectedEdge].animate = true\r\n        // console.log(selectedEdge)\r\n      }\r\n    )\r\n\r\n    function getLinkUtilization(edgeName){\r\n      const edge = edges[edgeName]\r\n      const utilzation = edge.utilization\r\n      // console.log(utilzation)\r\n      return utilzation\r\n    }\r\n\r\n    function getProgressStyle(utilization){\r\n      const util = utilization\r\n      return  util<0.5?'success':util<0.75?'warning':'danger'\r\n    }\r\n\r\n    function getSourceFromEdgeName(edgeName): string{\r\n      const edge = edges[edgeName]\r\n      const src = nodes[edge.source].name\r\n      return src\r\n    }\r\n\r\n    function getDestinationFromEdgeName(edgeName): string{\r\n      const edge = edges[edgeName]\r\n      const dst = nodes[edge.target].name\r\n      return dst\r\n    }\r\n\r\n    // function get\r\n\r\n    function clearFilter(): void{\r\n      filters.src_ip.splice(0, filters.src_ip.length)\r\n      filters.dst_ip.splice(0, filters.dst_ip.length)\r\n      filters.port_num.splice(0, filters.port_num.length)\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    onMounted(() => {\r\n      fetchNetwork(nodes, edges, layouts);\r\n      fetchPolicy();\r\n      setInterval(()=>fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts), 1000);\r\n      setInterval(()=>fetchPolicy(), 1000);\r\n\r\n    });\r\n    watchEffect(() => {\r\n      \r\n      // fetchNetwork(nodes, edges);\r\n    });\r\n    return { \r\n      nodes, edges, layouts, \r\n      configs, portnum, filters, \r\n      policy, selectedEdges, selectedEdge, policy_list,\r\n      selectedEdgeFlows, src_ip, dst_ip, threshold_input, device_choices, action_devices, \r\n      addPortFilter, clearFilter, fetchNetwork, getSourceFromEdgeName, getDestinationFromEdgeName, fetchNetworkFlow,\r\n      addSourceFilter, addDestFilter, getLinkUtilization, getProgressStyle, setLinkThreshold, getDevicesArray, addPolicy,\r\n      getDeviceNamebyID, removePolicy\r\n      };\r\n  },\r\n});\r\n"],"sourceRoot":""}]}