{"remainingRequest":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\PolicyRouting.vue?vue&type=template&id=43ebf52c&ts=true","dependencies":[{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\PolicyRouting.vue","mtime":1653034263741},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647613403080},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\babel-loader\\lib\\index.js","mtime":1647613402984},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\ts-loader\\index.js","mtime":1647613419057},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":1647613423241},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647613403080},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1647613423241}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+DQogICAgPGItdGFicz4NCiAgICAgICAgPGItdGFiIHRpdGxlPSIxIj48L2ItdGFiPg0KICAgICAgICA8Yi10YWIgdGl0bGU9IjIiPjwvYi10YWI+DQoNCiAgICA8L2ItdGFicz4NCiAgPC9kaXY+DQo="},{"version":3,"sources":["D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\PolicyRouting.vue"],"names":[],"mappings":";EACE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACH,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;IAE5B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC","file":"D:/Git/sdn_frontend/sdn_frontendv3/src/views/PolicyRouting.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <b-tabs>\r\n        <b-tab title=\"1\"></b-tab>\r\n        <b-tab title=\"2\"></b-tab>\r\n\r\n    </b-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { onMounted, reactive, ref } from \"vue\";\r\nimport client from \"../apiclient\";\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nexport default {\r\n  setup(){\r\n    \r\n    const policy = reactive({\r\n        name:'',\r\n        device_management_ip:'',\r\n        src_ip:'',\r\n        src_netmask:'',\r\n        src_port:'',\r\n        dst_ip:'',\r\n        dst_netmask:'',\r\n        dst_port:'',\r\n        action:'',\r\n        outgoing:'',\r\n    });\r\n    const nodes = reactive({});\r\n    const action_devices = ref<any[]>([{'device':\"\", \"action\":\"\", \"data\":\"\"}]);\r\n    const device_choices = reactive({});\r\n    const policy_list = reactive({});\r\n\r\n    async function fetchNetwork(nodes: any): Promise<void> {\r\n      const {\r\n        data: { graph, status },\r\n      } = await client.getAll();\r\n      const newNodes = graph.nodes;\r\n      const newEdges = graph.edges;\r\n      const newLayouts = graph.layout;\r\n      Object.assign(nodes, newNodes);\r\n      \r\n    }\r\n\r\n    async function fetchPolicy(): Promise<void> {\r\n      const { data } = await client.getPolicyRouting();\r\n      Object.assign(policy_list, data.flows)\r\n    }\r\n\r\n    async function addPolicy(): Promise<void>{\r\n\r\n      const actions: unknown[] = [];\r\n      // console.log(action_devices)\r\n      for(const action in action_devices.value){\r\n        actions.push({\r\n          'device_id': nodes[action_devices.value[action].device].device_id,\r\n          'action': parseInt(action_devices.value[action].action),\r\n          'data': action_devices.value[action].data\r\n        })\r\n      }\r\n      console.log(actions)\r\n\r\n      const {\r\n        data: {success}\r\n      } = await client.addPolicyRouting(\r\n        {\r\n          'name': policy.name,\r\n          'src_ip': policy.src_ip,\r\n          'src_port': policy.src_port,\r\n          'src_subnet': policy.src_netmask,\r\n          'dst_ip': policy.dst_ip,\r\n          'dst_port': policy.dst_port,\r\n          'dst_subnet': policy.dst_netmask,\r\n          'actions': actions\r\n        })\r\n      if(success){\r\n        Swal.fire({title:\"Add Policy Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    }\r\n\r\n    async function removePolicy(flow_id: string): Promise<void>{\r\n      const  data  = await client.deletePolicyRouting(flow_id)\r\n      console.log(data)\r\n      if(data){\r\n        Swal.fire({title:\"Remove Policy Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    }\r\n\r\n    onMounted(() => {\r\n      setInterval(()=>fetchPolicy(), 1000);\r\n      setInterval(()=>fetchNetwork(), 1000);\r\n\r\n      fetchPolicy();\r\n      fetchNetwork();\r\n\r\n    });\r\n\r\n  \r\n    return {policy, action_devices, device_choices, policy_list,\r\n    addPolicy, removePolicy}\r\n  }\r\n\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>\r\n\r\n"]}]}