{"remainingRequest":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue?vue&type=style&index=0&id=cbc39fb6&scoped=true&lang=css","dependencies":[{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue","mtime":1647770515945},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\css-loader\\dist\\cjs.js","mtime":1647613422429},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1647613423241},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\postcss-loader\\src\\index.js","mtime":1647613423008},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647613403080},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1647613423241}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiNjb24gewogIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxMDksIDE3MCwgMjU1KTsKICBoZWlnaHQ6IDgwdmg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoudi1uZXR3b3JrLWdyYXBoIHsKICBwb3NpdGlvbjpyZWxhdGl2ZTsKICB0b3A6IDEwcHg7CiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDEwOSwgMTcwLCAyNTUpOwogIGhlaWdodDogaW5oZXJpdDsKfQoKI3RhYmxlX3BhcmVudCB7CiAgbGVmdDogMTB2dzsKICB0b3A6IDE1dmg7CiAgaGVpZ2h0OiA3NXZoOwogIHdpZHRoOjEwMCU7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKfQoKI2ZpbHRlcl9pbnB1dCwgI0ZpbHRlcnMgewogIGRpc3BsYXk6ZmxleGJveDsKICBwYWRkaW5nOiAxMHB4Owp9CgppbnB1dCB7CiAgbWFyZ2luOiA1cHg7Cn0KCmJ1dHRvbiB7CiAgbWFyZ2luOiA1cHg7Cn0KCgojbGlua19pbmZvIHsKICBoZWlnaHQ6IDQwdmg7CiAgb3ZlcmZsb3c6IHNjcm9sbDsKfQoK"},{"version":3,"sources":["D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue"],"names":[],"mappings":";AA+LA,CAAC,CAAC,CAAC,EAAE;EACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACpC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACjB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACZ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACf;;AAEA,CAAC,CAAC,CAAC,CAAC,EAAE;EACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACb;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACb;;;AAGA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB","file":"D:/Git/sdn_frontend/sdn_frontendv3/src/views/Home.vue","sourceRoot":"","sourcesContent":["<template>\n  <div>\n    <div class=\"container\" id=\"con\">\n      <div class=\"row\">\n        <div class=\"col-6\">\n          <v-network-graph \n          v-model:selected-edges=\"selectedEdges\"\n          :nodes=\"nodes\"\n          :edges=\"edges\"\n          :configs=\"configs\"/>\n        </div>\n        <div class=\"col-6\">\n          <div class=\"row-6\" id=\"filter_input\">\n            <label for=\"tags-basic\">Add Port Number Filters</label>\n            <b-form-tags tag-variant=\"primary\" input-id=\"tags-basic\" placeholder=\"Enter new Port Number\" v-model=\"filters.port_num\"></b-form-tags>\n            <label for=\"tags-basic\">Add Source IP Number Filters</label>\n            <b-form-tags tag-variant=\"primary\" input-id=\"tags-basic\" placeholder=\"Enter new Source IP\" v-model=\"filters.src_ip\"></b-form-tags>\n            <label for=\"tags-basic\">Add Destination IP Filters</label>\n            <b-form-tags tag-variant=\"primary\" input-id=\"tags-basic\" placeholder=\"Enter new Destination IP\" v-model=\"filters.dst_ip\"></b-form-tags>\n          \n\n            <b-button variant=\"outline-primary\" size=\"sm\" v-on:click=\"clearFilter\">Clear Filter</b-button>\n          </div>\n          <div class=\"row-6\" v-if=\"selectedEdges.length === 1\" >\n            <h2>\n              <b-badge variant=\"warning\">\n                {{getSourceFromEdgeName(selectedEdges[0]) + \" - \" + getDestinationFromEdgeName(selectedEdges[0])}}\n              </b-badge>\n            </h2>\n            <h5>Link's Flows Informations</h5>\n            <div id=\"link_info\">\n              <b-card size=\"sm\" v-for=\"(flow, index) in selectedEdgeFlows\" :key=\"index\"\n              variant=\"info\"\n              :header='\"Source IP: \"+ flow.src_ip + \", Destination IP: \" + flow.dst_ip'\n              :sub-title='\"Source Port: \"+ flow.src_port + \", Destination Port: \" + flow.dst_port'>\n              <b-card-text>\n                <p>Next Hop IP: <b-badge variant=\"primary\">{{flow.next_hop_ip}}</b-badge></p>\n                <p v-if=\"flow.flow_rate !== ''\">Flow Rate: <b-badge variant=\"info\">{{flow.flow_rate}}</b-badge></p>\n              </b-card-text>\n              </b-card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, reactive, watchEffect, ref, watch } from \"vue\";\nimport { Nodes, Edges, getFullConfigs } from \"v-network-graph\";\n// import * as vNG from \"v-network-graph\"\n// import {ForceLayout} from \"@/node_modules/v-network-graph/lib/layouts/force-layout\"\nimport client from \"@/apiclient\";\nimport \"/node_modules/vue-scrolling-table/dist/style.css\"\nimport Swal from 'sweetalert2'\n\nexport default defineComponent({\n  name: \"Home\",\n  setup() {\n    const portnum = ref<string>(\"\");\n    const filters = reactive({\n      port_num: ref<number[]>([]),\n      src_ip: ref<string[]>([]),\n      dst_ip: ref<string[]>([])\n    });\n    const nodes = reactive({});\n    const edges = reactive({});\n    const flows = reactive({});\n    const selectedEdges = ref<string[]>([]);\n    const selectedEdge = ref<string>(\"\");\n    const selectedEdgeFlows = ref<any[]>([]);\n    const configs = reactive(getFullConfigs())\n    configs.node.selectable = true;\n    configs.edge.selectable = true;\n    configs.edge.normal.width = edge => edge.animate ? 3 : 2;\n    configs.edge.normal.dasharray = edge => edge.animate ? \"5\" : \"0\"\n    configs.edge.normal.animate = edge => !!edge.animate\n    const src_ip = ref<string>(\"\");\n    const dst_ip = ref<string>(\"\");\n\n    async function fetchNetwork(nodes: Nodes, edges: Edges): Promise<void> {\n      const {\n        data: { graph, status },\n      } = await client.getAll();\n      const newNodes = graph.nodes;\n      const newEdges = graph.edges;\n      Object.assign(nodes, newNodes);\n      Object.assign(edges, newEdges);\n      \n      if(status === \"ok\")\n        Swal.fire({title: \"Topology Loaded\", icon:\"success\", timer:2000})\n      console.log('done')\n    }\n\n    async function fetchNetworkFlow(nodes: Nodes, edges: Edges, filters:any): Promise<void> {\n      const {\n        data: { graph, flows_data },\n      } = await client.postFilters(filters);\n      const newNodes = graph.nodes;\n      const newEdges = graph.edges;\n      Object.assign(flows, flows_data)\n      Object.assign(nodes, newNodes);\n      Object.assign(edges, newEdges);\n      console.log(edges)\n      // console.log('update flow done')\n    }\n\n    function addPortFilter(): void {\n      if (portnum.value === \"\"){\n        return ;\n      }\n      const port = parseInt(portnum.value);\n      if (!filters.port_num.includes(port)) {\n        filters.port_num.push(port);\n      }\n      portnum.value = \"\";\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters})\n    }\n\n    function addSourceFilter(): void {\n      if (src_ip.value === \"\"){\n        return ;\n      }\n      const src = src_ip.value;\n      if (!filters.src_ip.includes(src)) {\n        filters.src_ip.push(src);\n      }\n      src_ip.value = \"\";\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters})\n    }\n\n    function addDestFilter(): void {\n      if (dst_ip.value === \"\"){\n        return ;\n      }\n      const dst = dst_ip.value;\n      if (!filters.dst_ip.includes(dst)) {\n        filters.dst_ip.push(dst);\n      }\n      dst_ip.value = \"\";\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters})\n    }\n\n\n\n    watch(\n      ()=>selectedEdges.value[0],\n      ()=>{\n        selectedEdge.value = selectedEdges.value[0]\n        fetchNetworkFlow(nodes, edges, {\"filters\":filters})\n        selectedEdgeFlows.value = flows[selectedEdge.value]\n        // Object.assign(selectedEdgeFlows, flows[selectedEdge.value])\n        // edges[selectedEdge].animate = true\n        // console.log(selectedEdge)\n      }\n    )\n\n    function getSourceFromEdgeName(edgeName): string{\n      const edge = edges[edgeName]\n      const src = nodes[edge.source].name\n      return src\n    }\n    function getDestinationFromEdgeName(edgeName): string{\n      const edge = edges[edgeName]\n      const dst = nodes[edge.target].name\n      return dst\n    }\n\n\n    function clearFilter(): void{\n      filters.src_ip.splice(0, filters.src_ip.length)\n      filters.dst_ip.splice(0, filters.dst_ip.length)\n      filters.port_num.splice(0, filters.port_num.length)\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters})\n    }\n\n    onMounted(() => {\n      fetchNetwork(nodes, edges);\n      setInterval(()=>fetchNetworkFlow(nodes, edges, {\"filters\":filters}), 5000);\n    });\n    watchEffect(() => {\n      // fetchNetwork(nodes, edges);\n    });\n    return { nodes, edges, configs, portnum, filters, selectedEdges, selectedEdge, selectedEdgeFlows, src_ip, dst_ip, \n    addPortFilter, clearFilter, fetchNetwork, getSourceFromEdgeName, getDestinationFromEdgeName, fetchNetworkFlow,\n    addSourceFilter, addDestFilter};\n  },\n});\n</script>\n<style scoped>\n#con {\n  border: 1px solid rgb(109, 170, 255);\n  height: 80vh;\n  overflow: hidden;\n}\n.v-network-graph {\n  position:relative;\n  top: 10px;\n  border: 1px solid rgb(109, 170, 255);\n  height: inherit;\n}\n\n#table_parent {\n  left: 10vw;\n  top: 15vh;\n  height: 75vh;\n  width:100%;\n  overflow: hidden;\n}\n\n#filter_input, #Filters {\n  display:flexbox;\n  padding: 10px;\n}\n\ninput {\n  margin: 5px;\n}\n\nbutton {\n  margin: 5px;\n}\n\n\n#link_info {\n  height: 40vh;\n  overflow: scroll;\n}\n\n</style>\n"]}]}