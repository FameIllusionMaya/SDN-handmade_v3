{"remainingRequest":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue?vue&type=style&index=0&id=fae5bece&scoped=true&lang=css","dependencies":[{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue","mtime":1653272884190},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\css-loader\\dist\\cjs.js","mtime":1647613422429},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1647613423241},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\postcss-loader\\src\\index.js","mtime":1647613423008},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647613403080},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1647613423241}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQojY29uIHsNCiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDEwOSwgMTcwLCAyNTUpOw0KICBoZWlnaHQ6IDgwdmg7DQogIG92ZXJmbG93OiBoaWRkZW47DQp9DQoudi1uZXR3b3JrLWdyYXBoIHsNCiAgcG9zaXRpb246cmVsYXRpdmU7DQogIHRvcDogMTBweDsNCiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDEwOSwgMTcwLCAyNTUpOw0KICBoZWlnaHQ6IGluaGVyaXQ7DQp9DQoNCiN0YWJsZV9wYXJlbnQgew0KICBsZWZ0OiAxMHZ3Ow0KICB0b3A6IDE1dmg7DQogIGhlaWdodDogNzV2aDsNCiAgd2lkdGg6MTAwJTsNCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCg0KI3BvbGljeV9saXN0IHsNCiAgb3ZlcmZsb3c6IHNjcm9sbDsNCiAgaGVpZ2h0OiA3NXZoOw0KfQ0KDQoNCg0KI2ZpbHRlcl9pbnB1dCwgI0ZpbHRlcnMgew0KICBkaXNwbGF5OmZsZXhib3g7DQogIHBhZGRpbmc6IDEwcHg7DQp9DQoNCmlucHV0IHsNCiAgbWFyZ2luOiA1cHg7DQp9DQoNCmJ1dHRvbiB7DQogIG1hcmdpbjogNXB4Ow0KfQ0KDQoNCiNsaW5rX2luZm8gew0KICBoZWlnaHQ6IDQwdmg7DQogIG92ZXJmbG93OiBzY3JvbGw7DQp9DQoNCg=="},{"version":3,"sources":["D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Home.vue"],"names":[],"mappings":"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","file":"D:/Git/sdn_frontend/sdn_frontendv3/src/views/Home.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div>\r\n    <b-container id=\"con\">\r\n      <b-row class=\"row\">\r\n        <b-col>\r\n          <v-network-graph \r\n          v-model:selected-edges=\"selectedEdges\"\r\n          :nodes=\"nodes\"\r\n          :layouts=\"layouts\"\r\n\r\n          :edges=\"edges\"\r\n          :configs=\"configs\"/>\r\n        </b-col>\r\n        <b-col>\r\n          <b-tabs content-class=\"mt-3\">\r\n            <b-tab title=\"Flow Stats\">\r\n              <b-row id=\"filter_input\">\r\n                <b-col>\r\n                  <label for=\"tags-port\">Add Port Number Filters</label>\r\n                  <b-form-tags tag-variant=\"primary\" \r\n                  input-id=\"tags-port\" \r\n                  placeholder=\"Enter new Port Number\" \r\n                  size=\"sm\"\r\n                  v-model=\"filters.port_num\"></b-form-tags>\r\n                  <label for=\"tags-srcip\">Add Source IP Number Filters</label>\r\n                  <b-form-tags tag-variant=\"primary\" \r\n                  input-id=\"tags-srcip\" \r\n                  placeholder=\"Enter new Source IP\" \r\n                  size=\"sm\"\r\n                  v-model=\"filters.src_ip\"></b-form-tags>\r\n                  <label for=\"tags-dstip\">Add Destination IP Filters</label>\r\n                  <b-form-tags tag-variant=\"primary\" \r\n                  input-id=\"tags-dstip\" \r\n                  placeholder=\"Enter new Destination IP\" \r\n                  size=\"sm\"\r\n                  v-model=\"filters.dst_ip\"></b-form-tags>\r\n                  <b-button variant=\"outline-primary\" size=\"sm\" v-on:click=\"clearFilter\">Clear Filter</b-button>\r\n                </b-col>\r\n                <b-col>\r\n                  <div v-if=\"selectedEdges.length === 1\">\r\n                    <h6>Link Ultilization {{`${(getLinkUtilization(selectedEdge) * 100).toFixed(2)}%`}}</h6>\r\n                    <b-progress max=\"1\"  >\r\n                      <b-progress-bar\r\n                      :value=\"getLinkUtilization(selectedEdges[0])\"\r\n                      :variant=\"getProgressStyle(getLinkUtilization(selectedEdge))\"\r\n                      >\r\n                      </b-progress-bar>\r\n                    </b-progress>\r\n                    <h6>Link Bandwidth: {{edges[selectedEdge].link_min_speed}} bps</h6>\r\n                    <h6>Utilization Threshold</h6>\r\n                    <b-form-input id=\"threshold\" size=\"sm\" v-model=\"threshold_input\"></b-form-input>\r\n                    <b-button size=\"sm\" variant=\"info\" v-on:click=\"setLinkThreshold\">Set Threshold</b-button>\r\n                  </div>\r\n                  \r\n                </b-col>\r\n              </b-row>\r\n              <b-row v-if=\"selectedEdges.length === 1\" >\r\n                <h4>\r\n                  <b-badge size=\"sm\" variant=\"warning\">\r\n                    {{getSourceFromEdgeName(selectedEdges[0]) + \" - \" + getDestinationFromEdgeName(selectedEdges[0])}}\r\n                  </b-badge>\r\n                </h4>\r\n                <h6>Link's Flows Informations</h6>\r\n                <div id=\"link_info\">\r\n                  <b-card size=\"sm\" v-for=\"(flow, index) in selectedEdgeFlows\" :key=\"index\"\r\n                  variant=\"info\"\r\n                  :header='\"Source IP: \"+ flow.src_ip + \", Destination IP: \" + flow.dst_ip'\r\n                  :sub-title='\"Source Port: \"+ flow.src_port + \", Destination Port: \" + flow.dst_port'>\r\n                  <b-card-text>\r\n                    <p>Next Hop IP: <b-badge variant=\"primary\">{{flow.next_hop_ip}}</b-badge></p>\r\n                    <p v-if=\"flow.flow_rate !== ''\">Flow Rate: <b-badge variant=\"info\">{{flow.flow_rate}}</b-badge></p>\r\n                  </b-card-text>\r\n                  </b-card>\r\n                </div>\r\n              </b-row>\r\n            </b-tab>\r\n            <b-tab title=\"Policy Routing\">\r\n              <div id=\"policy_list\">\r\n                <b-card size=\"sm\" v-for=\"(policy, index) in policy_list\" :key=\"index\"\r\n                  variant=\"info\"\r\n                  >\r\n                  <template #header>\r\n                    <b-row>\r\n                      <b-col cols=\"9\"><h6>Policy Name: {{policy?.name}}</h6></b-col>\r\n                      <b-col cols=\"3\"><b-button size=\"sm\" variant=\"danger\"\r\n                      v-on:click=\"removePolicy(policy?.flow_id.toString())\"\r\n                      >Remove Policy</b-button></b-col>\r\n                    </b-row>\r\n                    \r\n                  </template>\r\n                  <b-row>\r\n                    <b-col cols=\"10\">\r\n                      <!-- :sub-title='\"Status: \" + (policy.info.status === 3?\"Active\":\"Not Active\")' -->\r\n                      <b-card-text>\r\n                        <p>Source IP: <b-badge variant=\"primary\">{{policy?.src_ip}}</b-badge>\r\n                        Wildcard: <b-badge variant=\"primary\">{{policy?.src_wildcard}}</b-badge>\r\n                        Port: <b-badge variant=\"primary\">{{policy?.src_port}}</b-badge>\r\n                        </p>\r\n                      </b-card-text>\r\n                    </b-col>\r\n                  </b-row>\r\n                  <b-row>\r\n                    <b-col cols=\"10\">\r\n                      <!-- :sub-title='\"Status: \" + (policy.info.status === 3?\"Active\":\"Not Active\")' -->\r\n                      <b-card-text>\r\n                        <p>Destination IP: <b-badge variant=\"primary\">{{policy?.dst_ip}}</b-badge>\r\n                        Wildcard: <b-badge variant=\"primary\">{{policy?.dst_wildcard}}</b-badge>\r\n                        Port: <b-badge variant=\"primary\">{{policy?.dst_port}}</b-badge>\r\n                        </p>\r\n                      </b-card-text>\r\n                    </b-col >\r\n                  </b-row>\r\n                  <b-row>\r\n                    <table>\r\n                      <thead>\r\n                        <tr>\r\n                          <th v-for=\"(h, i) in ['Device', 'Action', 'Target']\" :key=\"i\">{{h}}</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr v-for=\"(d, i) in policy?.actions.map(\r\n                          d => ({\r\n                              'Device': getDeviceNamebyID(d.device_id.$oid),\r\n                              'Action': ['Drop', 'Next-Hop-IP', 'Next-Hop-Interface'][d.action - 1],\r\n                              'Target': d.data\r\n                                })\r\n                        )\" :key=\"i\"\r\n                        >\r\n                        <td>{{d.Device}}</td>\r\n                        <td>{{d.Action}}</td>\r\n                        <td>{{d.Target}}</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </table>\r\n                  </b-row>\r\n                  \r\n                  <!-- <b-col cols=\"2\">\r\n                    \r\n                  </b-col> -->\r\n                  \r\n                </b-card>\r\n              </div>\r\n            </b-tab>\r\n            <b-tab title=\"Add Policy Routing\">\r\n              <b-form-row>\r\n                <b-col cols=\"5\">\r\n                  <label for=\"policy-name\">Policy Name</label>\r\n                  <b-form-input v-model=\"policy.name\" size=\"sm\" id=\"policy-name\"></b-form-input>\r\n                </b-col>\r\n              </b-form-row>\r\n              <b-form-row id=\"policy_input\">\r\n                <b-col cols=\"3\">\r\n                  <label for=\"src-ip\">Source IP</label>\r\n                  <b-form-input v-model=\"policy.src_ip\" size=\"sm\" id=\"src-ip\"></b-form-input>\r\n                  <label for=\"dst-ip\">Destination IP</label>\r\n                  <b-form-input v-model=\"policy.dst_ip\" size=\"sm\" id=\"dst-ip\"></b-form-input>\r\n                </b-col>\r\n                <b-col>\r\n                  <label for=\"src-netmask\">Source Wildcard</label>\r\n                  <b-form-input v-model=\"policy.src_netmask\" size=\"sm\" id=\"src-netmask\"></b-form-input>\r\n                  <label for=\"dst-netmask\">Destination Wildcard</label>\r\n                  <b-form-input v-model=\"policy.dst_netmask\" size=\"sm\" id=\"dst-netmask\"></b-form-input>\r\n                </b-col>\r\n                <b-col>\r\n                  <label for=\"src-netmask\">Source Port(num or any)</label>\r\n                  <b-form-input v-model=\"policy.src_port\" size=\"sm\" id=\"src-port\"></b-form-input>\r\n                  <label for=\"dst-netmask\">Destination Port(num or any)</label>\r\n                  <b-form-input v-model=\"policy.dst_port\" size=\"sm\" id=\"dst-port\"></b-form-input>\r\n                </b-col>\r\n              </b-form-row>\r\n              <b-row>\r\n                <b-col cols=\"4\"><label for=\"policy_device\">Device</label></b-col>\r\n                <b-col cols=\"3\"><label for=\"policy_action\">Action</label></b-col>\r\n                <b-col cols=\"4\"><label v-if=\"action_devices[0].action !== '1' && action_devices[0].action !== ''\" \r\n                  for=\"policy_data\">Action Target</label></b-col>\r\n              </b-row>\r\n              <b-form-row v-for=\"(_, index) in action_devices\" :key=\"index\">\r\n                <b-col cols=\"4\">\r\n                  \r\n                  <b-form-select id=\"policy_device\" v-model=\"action_devices[index].device\" size=\"sm\" class=\"mt-3\">\r\n                    <b-form-select-option v-for=\"(node, index) in getDevicesArray()\" :key=\"index\"\r\n                    :value=\"node.name\">{{node.name + '(' + node.management_ip + ')'}}</b-form-select-option>\r\n                  </b-form-select>\r\n                </b-col>\r\n                <b-col cols=\"3\">\r\n                  \r\n                  <b-form-select id=\"policy_action\" v-model=\"action_devices[index].action\" size=\"sm\" class=\"mt-3\">\r\n                    <b-form-select-option value=1>Drop</b-form-select-option>\r\n                    <b-form-select-option value=2>Next-Hop IP</b-form-select-option>\r\n                    <b-form-select-option value=3>Interface</b-form-select-option>\r\n                  </b-form-select>\r\n                </b-col>\r\n                <b-col cols=\"3\">\r\n                  \r\n                  <b-form-select id=\"policy_data\" v-if=\"action_devices[index].action !== '1' && action_devices[index].action !== ''\" \r\n                  :options=\"action_devices[index].action === '2'?nodes[action_devices[index].device].next_hop_ip:nodes[action_devices[index].device].interfaces\"\r\n                  v-model=\"action_devices[index].data\"\r\n                  size=\"sm\" class=\"mt-3\">\r\n                  </b-form-select>\r\n                </b-col>\r\n                <b-col cols=\"2\">\r\n                  <b-button pill variant=\"outline-danger\" size=\"sm\" v-on:click=\"action_devices.splice(index, 1)\">Remove</b-button>\r\n                </b-col>\r\n              </b-form-row>\r\n              <b-button size=\"sm\" v-on:click=\"action_devices.push({'device':'', 'action':'', 'data':''})\">Add more device</b-button>\r\n              <b-button size=\"sm\" v-on:click=\"addPolicy\" variant=\"success\">Add Policy</b-button>\r\n            </b-tab>\r\n            \r\n          </b-tabs>\r\n        </b-col>\r\n      </b-row>\r\n    </b-container>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, onMounted, reactive, watchEffect, ref, watch } from \"vue\";\r\nimport { Nodes, Edges, getFullConfigs } from \"v-network-graph\";\r\n// import * as vNG from \"v-network-graph\"\r\n// import {ForceLayout} from \"@/node_modules/v-network-graph/lib/layouts/force-layout\"\r\nimport client from \"@/apiclient\";\r\nimport \"/node_modules/vue-scrolling-table/dist/style.css\"\r\nimport Swal from 'sweetalert2'\r\n\r\nexport default defineComponent({\r\n  name: \"Home\",\r\n  setup() {\r\n    const portnum = ref<string>(\"\");\r\n    const filters = reactive({\r\n      port_num: ref<number[]>([]),\r\n      src_ip: ref<string[]>([]),\r\n      dst_ip: ref<string[]>([])\r\n    });\r\n    const nodes = reactive({});\r\n    const edges = reactive({});\r\n    const layouts = reactive({});\r\n    const flows = reactive({});\r\n    const selectedEdges = ref<string[]>([]);\r\n    const selectedEdge = ref<string>(\"\");\r\n    const selectedEdgeFlows = ref<any[]>([]);\r\n    const selectedNodes = ref<string[]>([]);\r\n    const selectedNode = ref<string>(\"\");\r\n    const policy_list = reactive({});\r\n\r\n    const configs = reactive(getFullConfigs())\r\n    configs.node.selectable = true;\r\n    configs.edge.selectable = edge => edge.selectable;\r\n    configs.edge.normal.width = edge => edge.animate ? 3 : 2;\r\n    configs.edge.normal.dasharray = edge => edge.animate ? \"5\" : \"0\"\r\n    configs.edge.normal.animate = edge => !!edge.animate\r\n    // configs.edge.marker.source.type = 'arrow'\r\n    configs.node.draggable = true;\r\n    configs.node.normal.color = node => node.color\r\n    const src_ip = ref<string>(\"\");\r\n    const dst_ip = ref<string>(\"\");\r\n    const threshold_input = ref<string>(\"1\");\r\n    const action_devices = ref<any[]>([{'device':\"\", \"action\":\"\", \"data\":\"\"}]);\r\n    const device_choices = reactive({});\r\n\r\n    const policy = reactive({\r\n      name:'',\r\n      device_management_ip:'',\r\n      src_ip:'',\r\n      src_netmask:'',\r\n      src_port:'',\r\n      dst_ip:'',\r\n      dst_netmask:'',\r\n      dst_port:'',\r\n      action:'',\r\n      outgoing:'',\r\n    });\r\n\r\n    async function fetchNetwork(nodes: Nodes, edges: Edges, layouts: any): Promise<void> {\r\n      const {\r\n        data: { graph, status },\r\n      } = await client.getAll();\r\n      const newNodes = graph.nodes;\r\n      const newEdges = graph.edges;\r\n      const newLayouts = graph.layout;\r\n      // const newChoices = \r\n      Object.assign(nodes, newNodes);\r\n      Object.assign(layouts, newLayouts);\r\n      Object.assign(edges, newEdges);\r\n      \r\n      if(status === \"ok\")\r\n        Swal.fire({title: \"Topology Loaded\", icon:\"success\", timer:2000})\r\n      // console.log('done')\r\n    }\r\n\r\n    async function fetchNetworkFlow(nodes: Nodes, edges: Edges, filters:any, layouts: any): Promise<void> {\r\n      const {\r\n        data: { graph, flows_data },\r\n      } = await client.postFilters(filters);\r\n      const newNodes = graph.nodes;\r\n      const newEdges = graph.edges;\r\n      // const newLayouts = graph.layout;\r\n\r\n      Object.assign(flows, flows_data)\r\n      Object.assign(nodes, newNodes);\r\n      Object.assign(edges, newEdges);\r\n      // Object.assign(layouts, newLayouts);\r\n\r\n      // console.log(nodes)\r\n      // console.log(edges)\r\n      // console.log(layouts)\r\n      // console.log('update flow done')\r\n    }\r\n\r\n    async function fetchPolicy(): Promise<void> {\r\n      const { data } = await client.getPolicyRouting();\r\n      Object.assign(policy_list, data.flows)\r\n    }\r\n\r\n    function getDevicesArray(): unknown[]{\r\n      const devices: unknown[] = [];\r\n      for (const node in nodes){\r\n        if(!nodes[node].name.includes(\"/\"))\r\n          devices.push(nodes[node])\r\n      }\r\n      // console.log(devices)\r\n      return devices;\r\n    }\r\n\r\n    function addPortFilter(): void {\r\n      if (portnum.value === \"\"){\r\n        return ;\r\n      }\r\n      const port = parseInt(portnum.value);\r\n      if (!filters.port_num.includes(port)) {\r\n        filters.port_num.push(port);\r\n      }\r\n      portnum.value = \"\";\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    function addSourceFilter(): void {\r\n      if (src_ip.value === \"\"){\r\n        return ;\r\n      }\r\n      const src = src_ip.value;\r\n      if (!filters.src_ip.includes(src)) {\r\n        filters.src_ip.push(src);\r\n      }\r\n      src_ip.value = \"\";\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    function addDestFilter(): void {\r\n      if (dst_ip.value === \"\"){\r\n        return ;\r\n      }\r\n      const dst = dst_ip.value;\r\n      if (!filters.dst_ip.includes(dst)) {\r\n        filters.dst_ip.push(dst);\r\n      }\r\n      dst_ip.value = \"\";\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    function getDeviceNamebyID(id: string): string{\r\n      for(const node in nodes){\r\n        if(nodes[node].device_id === id)\r\n          return nodes[node].name\r\n      }\r\n      return \"removed device\"\r\n    }\r\n\r\n    async function removePolicy(flow_id: string): Promise<void>{\r\n      const  data  = await client.deletePolicyRouting(flow_id)\r\n      console.log(data)\r\n      if(data){\r\n        Swal.fire({title:\"Remove Policy Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    }\r\n\r\n    async function addPolicy(): Promise<void>{\r\n\r\n      const actions: unknown[] = [];\r\n      // console.log(action_devices)\r\n      for(const action in action_devices.value){\r\n        actions.push({\r\n          'device_id': nodes[action_devices.value[action].device].device_id,\r\n          'action': parseInt(action_devices.value[action].action),\r\n          'data': action_devices.value[action].data\r\n        })\r\n      }\r\n      console.log(actions)\r\n\r\n      const {\r\n        data: {success}\r\n      } = await client.addPolicyRouting(\r\n        {\r\n          'name': policy.name,\r\n          'src_ip': policy.src_ip,\r\n          'src_port': policy.src_port,\r\n          'src_subnet': policy.src_netmask,\r\n          'dst_ip': policy.dst_ip,\r\n          'dst_port': policy.dst_port,\r\n          'dst_subnet': policy.dst_netmask,\r\n          'actions': actions\r\n        })\r\n      if(success){\r\n        Swal.fire({title:\"Add Policy Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    }\r\n\r\n    async function setLinkThreshold(){\r\n      const {\r\n        data: { success }\r\n      } = await client.setLinkUtilization({\r\n        'link_id':edges[selectedEdge.value]['link_id'],\r\n        'utilization_threshold': parseFloat(threshold_input.value)\r\n      });\r\n      if(success){\r\n        Swal.fire({title:\"Set Link Utilization Successful\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during the process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n    } \r\n\r\n\r\n    watch(\r\n      ()=>selectedEdges.value[0],\r\n      ()=>{\r\n        selectedEdge.value = selectedEdges?.value[0]\r\n        // fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n        selectedEdgeFlows.value = flows[selectedEdge.value]\r\n        threshold_input.value = edges[selectedEdge.value]?.utilization_threshold\r\n        \r\n        \r\n        // Object.assign(selectedEdgeFlows, flows[selectedEdge.value])\r\n        // edges[selectedEdge].animate = true\r\n        // console.log(selectedEdge)\r\n      }\r\n    )\r\n\r\n    function getLinkUtilization(edgeName){\r\n      const edge = edges[edgeName]\r\n      const utilzation = edge.utilization\r\n      // console.log(utilzation)\r\n      return utilzation\r\n    }\r\n\r\n    function getProgressStyle(utilization){\r\n      const util = utilization\r\n      return  util<0.5?'success':util<0.75?'warning':'danger'\r\n    }\r\n\r\n    function getSourceFromEdgeName(edgeName): string{\r\n      const edge = edges[edgeName]\r\n      const src = nodes[edge.source].name\r\n      return src\r\n    }\r\n\r\n    function getDestinationFromEdgeName(edgeName): string{\r\n      const edge = edges[edgeName]\r\n      const dst = nodes[edge.target].name\r\n      return dst\r\n    }\r\n\r\n    // function get\r\n\r\n    function clearFilter(): void{\r\n      filters.src_ip.splice(0, filters.src_ip.length)\r\n      filters.dst_ip.splice(0, filters.dst_ip.length)\r\n      filters.port_num.splice(0, filters.port_num.length)\r\n      fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts)\r\n    }\r\n\r\n    onMounted(() => {\r\n      fetchNetwork(nodes, edges, layouts);\r\n      fetchPolicy();\r\n      setInterval(()=>fetchNetworkFlow(nodes, edges, {\"filters\":filters}, layouts), 1000);\r\n      setInterval(()=>fetchPolicy(), 1000);\r\n\r\n    });\r\n    watchEffect(() => {\r\n      \r\n      // fetchNetwork(nodes, edges);\r\n    });\r\n    return { \r\n      nodes, edges, layouts, \r\n      configs, portnum, filters, \r\n      policy, selectedEdges, selectedEdge, policy_list,\r\n      selectedEdgeFlows, src_ip, dst_ip, threshold_input, device_choices, action_devices, \r\n      addPortFilter, clearFilter, fetchNetwork, getSourceFromEdgeName, getDestinationFromEdgeName, fetchNetworkFlow,\r\n      addSourceFilter, addDestFilter, getLinkUtilization, getProgressStyle, setLinkThreshold, getDevicesArray, addPolicy,\r\n      getDeviceNamebyID, removePolicy\r\n      };\r\n  },\r\n});\r\n</script>\r\n<style scoped>\r\n#con {\r\n  border: 1px solid rgb(109, 170, 255);\r\n  height: 80vh;\r\n  overflow: hidden;\r\n}\r\n.v-network-graph {\r\n  position:relative;\r\n  top: 10px;\r\n  border: 1px solid rgb(109, 170, 255);\r\n  height: inherit;\r\n}\r\n\r\n#table_parent {\r\n  left: 10vw;\r\n  top: 15vh;\r\n  height: 75vh;\r\n  width:100%;\r\n  overflow: hidden;\r\n}\r\n\r\n#policy_list {\r\n  overflow: scroll;\r\n  height: 75vh;\r\n}\r\n\r\n\r\n\r\n#filter_input, #Filters {\r\n  display:flexbox;\r\n  padding: 10px;\r\n}\r\n\r\ninput {\r\n  margin: 5px;\r\n}\r\n\r\nbutton {\r\n  margin: 5px;\r\n}\r\n\r\n\r\n#link_info {\r\n  height: 40vh;\r\n  overflow: scroll;\r\n}\r\n\r\n</style>\r\n"]}]}