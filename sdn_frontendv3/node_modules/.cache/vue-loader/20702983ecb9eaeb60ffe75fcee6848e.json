{"remainingRequest":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Devices.vue?vue&type=style&index=0&id=33144d13&lang=css","dependencies":[{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Devices.vue","mtime":1647846517429},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\css-loader\\dist\\cjs.js","mtime":1647613422429},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1647613423241},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\postcss-loader\\src\\index.js","mtime":1647613423008},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1647613403080},{"path":"D:\\Git\\sdn_frontend\\sdn_frontendv3\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1647613423241}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQojRGV2aWNlc19saXN0ew0KICBoZWlnaHQ6IDgwdmg7DQogIG92ZXJmbG93OiBzY3JvbGw7DQp9DQoNCiNEZXZpY2VGb3Jtew0KICBoZWlnaHQ6IDgwdmg7DQogIG92ZXJmbG93OiBzY3JvbGw7DQp9DQouZGV2aWNlX2J1dHRvbnsNCg0KfQ0K"},{"version":3,"sources":["D:\\Git\\sdn_frontend\\sdn_frontendv3\\src\\views\\Devices.vue"],"names":[],"mappings":";AA2RA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB;;AAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClB;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;AAEd","file":"D:/Git/sdn_frontend/sdn_frontendv3/src/views/Devices.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-6\" >\r\n        <h3><b-badge variant=\"primary\" size=\"lg\">Devices List</b-badge></h3>\r\n        <div id=\"Devices_list\" class=\"d-grid gap-2\">\r\n          <b-button class=\"device_button\" size=\"sm\" block :variant='selected_device.index===index?\"outline-success\":\"outline-primary\"'\r\n          v-for=\"(device, index) in device_list\" v-bind:key=\"index\" v-on:click=\"toggle_mode(index)\">\r\n            <h4>{{device.name}}</h4>\r\n            <h6>{{\"Management IP: \" + device.management_ip}}</h6>\r\n            <b-badge pill :variant='device.is_ssh_connect?\"success\":\"danger\"'>SSH</b-badge>\r\n            <b-badge pill :variant='device.is_snmp_connect?\"success\":\"danger\"'>SNMP</b-badge>\r\n          </b-button>\r\n          <!-- <b-card :header='\"Management IP: \" + device.management_ip' header-bg-variant=\"light\"\r\n          v-for=\"(device, index) in device_list\" v-bind:key=\"index\" v-on:click=\"toggle_mode(index)\"\r\n          :title=device.name>\r\n            <b-badge pill :variant='device.is_ssh_connect?\"success\":\"danger\"'>SSH</b-badge>\r\n            <b-badge pill :variant='device.is_snmp_connect?\"success\":\"danger\"'>SNMP</b-badge>\r\n          </b-card> -->\r\n        </div>\r\n      </div>\r\n      <div class=\"col-6\">\r\n        <h3>\r\n          <b-badge :variant='patch_device_enable?\"success\":\"warning\"' size=\"lg\">\r\n            {{patch_device_enable?selected_device.name:\"New Device Info\"}}\r\n          </b-badge>\r\n        </h3>\r\n          <b-form @submit.prevent=\"formSubmit\" id=\"DeviceForm\">\r\n            \r\n            <b-form-group label=\"Management IP\">\r\n              <b-form-input size=\"sm\" v-model=\"device_data.management_ip\" placeholder=\"Enter Management IP\" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"System Type\">\r\n              <b-form-select size=\"sm\" v-model=\"device_data.type\" :options=\"\r\n              [\r\n              {value: null, text: 'Select System Type'},\r\n              {value: 'cisco_ios', text:'cisco_ios'},\r\n              ]\r\n              \" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"SSH Username\">\r\n              <b-form-input size=\"sm\" v-model=\"device_data.ssh_info.username\" placeholder=\"Enter SSH Username\" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"SSH Password\">\r\n              <b-form-input size=\"sm\" v-model=\"device_data.ssh_info.password\" placeholder=\"Enter SSH Password\" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"SSH Secret\">\r\n              <b-form-input size=\"sm\" v-model=\"device_data.ssh_info.secret\" placeholder=\"Enter SSH Secret\" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"SSH Port\">\r\n              <b-form-input size=\"sm\" v-model=\"device_data.ssh_info.port\" placeholder=\"Enter SSH Port\" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"SNMP Version\">\r\n              <b-form-select size=\"sm\" v-model=\"device_data.snmp_info.version\" :options=\"\r\n              [\r\n              {value: null, text: 'Select SNMP Version'},\r\n              {value: '2c', text:'2c'}\r\n              ]\r\n              \" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"SNMP Community String\">\r\n              <b-form-input size=\"sm\" v-model=\"device_data.snmp_info.community\" placeholder=\"Enter SNMP Community String\" required/>\r\n            </b-form-group>\r\n            <b-form-group label=\"SNMP Port\">\r\n              <b-form-input size=\"sm\" v-model=\"device_data.snmp_info.port\" placeholder=\"Enter SNMP Port\" required/>\r\n            </b-form-group>\r\n            <b-button :variant='patch_device_enable?\"success\":\"warning\"' type=\"submit\">\r\n              {{ patch_device_enable?\"Patch Device\":\"Add Device\" }}\r\n            </b-button>\r\n            <b-button variant=\"danger\" v-show=\"patch_device_enable\" v-on:click=\"removeDevice()\">\r\n              Remove {{selected_device.name}}\r\n            </b-button>\r\n          </b-form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { defineComponent, onMounted, reactive, watchEffect, ref, watch } from \"vue\";\r\nimport client from \"../apiclient\";\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\nexport default {\r\n  setup(){\r\n    const patch_device_enable = ref<boolean>(false)\r\n    const device_data = reactive({\r\n          _id:'',\r\n          management_ip:'',\r\n          type:'',\r\n          ssh_info:{\r\n            username:'',\r\n            password:'',\r\n            secret:'',\r\n            port:'22'\r\n          },\r\n          snmp_info:{\r\n            community:'',\r\n            port:'161',\r\n            version:'',\r\n          }\r\n        })\r\n    const selected_device = reactive({serial:'', _id:{$oid:''}, index:-1})\r\n    const device_list = reactive({})\r\n    const overlay = ref<boolean>(false)\r\n\r\n    async function toggle_mode(index){\r\n      if(selected_device.serial===device_list[index].serial){\r\n        patch_device_enable.value = false\r\n        Object.assign(device_data, {\r\n          management_ip:'',\r\n          type:'',\r\n          ssh_info:{\r\n            username:'',\r\n            password:'',\r\n            secret:'',\r\n            port:''\r\n          },\r\n          snmp_info:{\r\n            community:'',\r\n            port:'',\r\n            version:'',\r\n          }\r\n        })\r\n        Object.assign(selected_device, {\r\n          index:-1,\r\n          serial:'',\r\n          management_ip:'',\r\n          type:'',\r\n          ssh_info:{\r\n            username:'',\r\n            password:'',\r\n            secret:'',\r\n            port:''\r\n          },\r\n          snmp_info:{\r\n            community:'',\r\n            port:'',\r\n            version:'',\r\n          }\r\n        })\r\n        console.log('dup')\r\n        // console.log(selected_device)\r\n      }\r\n      else{\r\n        patch_device_enable.value = true\r\n        Object.assign(selected_device, device_list[index])\r\n        selected_device.index = index\r\n        Object.assign(device_data, {\r\n          _id: device_list[index]._id.$oid,\r\n          management_ip: device_list[index].management_ip,\r\n          type: device_list[index].type,\r\n          ssh_info:{\r\n            username: device_list[index].ssh_info.username,\r\n            password: device_list[index].ssh_info.password,\r\n            secret: device_list[index].ssh_info.secret,\r\n            port: device_list[index].ssh_info.port\r\n          },\r\n          snmp_info:{\r\n            community: device_list[index].snmp_info.community,\r\n            port: device_list[index].snmp_info.port,\r\n            version: device_list[index].snmp_info.version ,\r\n          }\r\n        })\r\n      }\r\n      console.log('toggle ' + index)\r\n    }\r\n\r\n    async function addDevice(){\r\n      console.log('add')\r\n      overlay.value = true\r\n      const {\r\n        data: { success }\r\n      } = await client.postDevice(\r\n        {\r\n          management_ip: device_data.management_ip, \r\n          type: device_data.type,\r\n          ssh_info:{\r\n            username: device_data.ssh_info.username,\r\n            password: device_data.ssh_info.password,\r\n            secret: device_data.ssh_info.secret,\r\n            port: device_data.ssh_info.port===''?-1:parseInt(device_data.ssh_info.port, 10),\r\n          },\r\n          snmp_info:{\r\n            community: device_data.snmp_info.community,\r\n            port: device_data.snmp_info.port===''?-1:parseInt(device_data.snmp_info.port, 10),\r\n            version: device_data.snmp_info.version\r\n          }\r\n        }\r\n      );\r\n      if(success){\r\n        Swal.fire({title:\"Device was added\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during add process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n      overlay.value = false\r\n\r\n    }\r\n\r\n    async function patchDevice(){\r\n      console.log('patch')\r\n      overlay.value = true\r\n\r\n      const {\r\n        data: { success }\r\n      } = await client.patchDevice(\r\n        {\r\n          _id: device_data._id,\r\n          management_ip: device_data.management_ip, \r\n          type: device_data.type,\r\n          ssh_info:{\r\n            username: device_data.ssh_info.username,\r\n            password: device_data.ssh_info.password,\r\n            secret: device_data.ssh_info.secret,\r\n            port: device_data.ssh_info.port===''?-1:parseInt(device_data.ssh_info.port, 10),\r\n          },\r\n          snmp_info:{\r\n            community: device_data.snmp_info.community,\r\n            port: device_data.snmp_info.port===''?-1:parseInt(device_data.snmp_info.port, 10),\r\n            version: device_data.snmp_info.version\r\n          }\r\n        }, device_data._id\r\n      );\r\n      if(success){\r\n        Swal.fire({title:\"Device was patched\", icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }\r\n      else{\r\n        Swal.fire({title:\"Error during patch process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n      overlay.value = false\r\n\r\n    }\r\n\r\n    async function removeDevice(){\r\n      console.log({device_id:selected_device._id.$oid})\r\n      overlay.value = true\r\n      const {\r\n        data: { success }\r\n      } = await client.deleteDevice(selected_device._id.$oid)\r\n      if(success){\r\n        Swal.fire({title:'Device was removed', icon:\"success\", confirmButtonText:\"Okay\"})\r\n      }else{\r\n        Swal.fire({title:\"Error during remove process\", icon:\"error\", confirmButtonText:\"Okay\"})\r\n      }\r\n      delete device_list[selected_device.index]\r\n      overlay.value = false\r\n\r\n    }\r\n    async function formSubmit(){\r\n      if(patch_device_enable.value){\r\n        patchDevice()\r\n      }\r\n      else{\r\n        addDevice()\r\n      }\r\n      fetchDevice()\r\n    }\r\n\r\n    async function fetchDevice(){\r\n      console.log('fetch')\r\n      const {\r\n        data: { devices }\r\n      } = await client.getAllDevices()\r\n      console.log(device_list)\r\n      console.log('---')\r\n      console.log(devices)\r\n      Object.assign(device_list, devices)\r\n      // console.log(devices)\r\n    }\r\n    onMounted(() => {\r\n      fetchDevice();\r\n      setInterval(()=>fetchDevice(), 5000);\r\n    });\r\n\r\n  \r\n    return {device_data, device_list, patch_device_enable, selected_device, toggle_mode, formSubmit, removeDevice}\r\n  }\r\n\r\n}\r\n</script>\r\n<style>\r\n#Devices_list{\r\n  height: 80vh;\r\n  overflow: scroll;\r\n}\r\n\r\n#DeviceForm{\r\n  height: 80vh;\r\n  overflow: scroll;\r\n}\r\n.device_button{\r\n\r\n}\r\n</style>\r\n\r\n"]}]}